{"version":3,"sources":["components/MovieCard.js","App.js","serviceWorker.js","index.js"],"names":["Poster","Title","imdbID","Year","Type","imdbLink","className","src","alt","href","target","App","useState","searchResults","setSearchResults","userInput","setUserInput","listOfMovies","map","movie","MovieCard","action","onSubmit","event","preventDefault","fetch","then","resp","json","Search","type","placeholder","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0JAEe,cAA4C,IAAzCA,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,MAAaC,GAAmB,EAAzBC,KAAyB,EAAnBD,QAAQE,EAAW,EAAXA,KACvCC,EAAQ,qCAAiCH,GAC/C,OACE,yBAAKI,UAAU,QACb,yBAAKA,UAAU,WAAWC,IAAKP,EAAQQ,IAAI,KAE3C,wBAAIF,UAAU,qBAAqBL,GACnC,uBAAGK,UAAU,oBAAb,SAAuCF,GACvC,uBAAGK,KAAMJ,EAAUC,UAAU,OAAOI,OAAO,uBAA3C,cACc,OCmDLC,MArDf,WAAgB,IAAD,EAC6BC,mBAAS,IADtC,mBACNC,EADM,KACSC,EADT,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,KA2BPC,EAAeJ,EAAcK,KAAI,SAAAC,GAAK,OAC1C,kBAACC,EAAcD,MAGjB,OACE,yBAAKb,UAAU,QACb,wBAAIA,UAAU,SAAd,cAEA,0BAAMe,OAAO,GAAGf,UAAU,OAAOgB,SAnBhB,SAAAC,GACnBA,EAAMC,iBACNC,MAAM,mCAAD,OApBO,WAoBP,cAAiDV,IAAaW,MACjE,SAAAC,GACEA,EAAKC,OAAOF,MAAK,SAAAE,GACfA,EAAKC,QAAUf,EAAiBc,EAAKC,gBAevC,2BACEC,KAAK,OACLC,YAAY,QACZzB,UAAU,eACV0B,MAAOjB,EACPkB,SAjCa,SAAAV,GACnBP,EAAaO,EAAMb,OAAOsB,UAmCtB,4BAAQ1B,UAAU,eAAlB,WAIF,yBAAKA,UAAU,0BAA0BW,KC7C3BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.46906f02.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default ({ Poster, Title, Year, imdbID, Type }) => {\r\n  const imdbLink = `https://www.imdb.com/title/${imdbID}`\r\n  return (\r\n    <div className=\"card\">\r\n      <img className=\"card-img\" src={Poster} alt=\"\" />\r\n\r\n      <h2 className=\"description-title\">{Title}</h2>\r\n      <p className=\"description-desc\">Type: {Type}</p>\r\n      <a href={imdbLink} className=\"imdb\" target=\"noopener noreferrer\">\r\n        See in IMDB{\" \"}\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from \"react\"\nimport MovieCard from \"./components/MovieCard\"\n\n/**\n * API Key para conectar a OMDB\n * @type {String}\n */\nconst API_KEY = \"44c3dae1\"\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState([])\n  const [userInput, setUserInput] = useState(\"\")\n\n  /**\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event\n   */\n  const handleChange = event => {\n    setUserInput(event.target.value)\n  }\n\n  /**\n   *\n   * @param {React.FormEvent<HTMLFormElement>} event este es el evento que le pasa la funcion onSubmit a nuestro metodo\n   */\n  const handleSubmit = event => {\n    event.preventDefault()\n    fetch(`https://www.omdbapi.com/?apikey=${API_KEY}&s=${userInput}`).then(\n      resp => {\n        resp.json().then(json => {\n          json.Search && setSearchResults(json.Search)\n        })\n      }\n    )\n  }\n\n  const listOfMovies = searchResults.map(movie => (\n    <MovieCard {...movie}></MovieCard>\n  ))\n\n  return (\n    <div className=\"main\">\n      <h1 className=\"title\">Billboards</h1>\n\n      <form action=\"\" className=\"form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          className=\"form-control\"\n          value={userInput}\n          onChange={handleChange}\n        />\n\n        <button className=\"form-button\">Search</button>\n      </form>\n\n      {/* Resultados */}\n      <div className=\"results flex-container\">{listOfMovies}</div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}